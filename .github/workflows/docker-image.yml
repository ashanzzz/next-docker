# GitHub Actions 工作流：仅在官方发布新版本时构建并发布 Nextcloud Full-FPM 镜像
# - 每周定时检查一次（周一 03:00 Europe/Helsinki / 00:00 UTC），亦可手动触发
# - 通过多种途径获取 Nextcloud 最新版本号（GitHub Releases → Docker Hub → 容器）
# - 若版本号与上次记录不同则构建并推送镜像，否则跳过
# - 构建上下文为仓库 `.examples/dockerfiles/full/fpm`，基础镜像 `nextcloud:fpm`
# - 镜像推送至 GHCR（默认，可改为 Docker Hub），标签与官方版本号一致（如 29.0.1）
# - 构建成功后更新 `.last_version` 文件并自动提交，确保版本记录同步

name: 构建 Nextcloud Full‑FPM

on:
  schedule:
    # 每周一 00:00 UTC（赫尔辛基时间 03:00）
    - cron: "0 0 * * 1"
  workflow_dispatch:

env:
  # 镜像名称前缀（修改为 Docker Hub 用户名/仓库即可推送到 Docker Hub）
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/nextcloud-full-fpm

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.decide.outputs.should_build }}
      latest_version: ${{ steps.decide.outputs.latest_version }}
    steps:
      - uses: actions/checkout@v4

      # ① 多渠道获取官方最新版本号（GitHub Releases → Docker Hub → 容器）
      - name: 获取 Nextcloud 最新版本号（多渠道）
        id: upstream
        run: |
          set -e
          echo "⏳ 尝试从 GitHub Releases API 获取 Nextcloud 最新版本号..."
          GITHUB_RESPONSE=$(curl -fsSL "https://api.github.com/repos/nextcloud/server/releases/latest" || true)
          VERSION=$(echo "$GITHUB_RESPONSE" | jq -r '.tag_name' | sed 's/^v//')
          if [ -n "$VERSION" ] && [ "$VERSION" != "null" ]; then
            echo "✔ 成功获取版本：$VERSION（来源：GitHub 发布）"
          else
            echo "❗ 未从 GitHub Releases API 获取版本，尝试 Docker Hub..."
            sudo apt-get update -y && sudo apt-get install -y jq
            TAGS_JSON=$(curl -fsSL "https://registry.hub.docker.com/v2/repositories/library/nextcloud/tags?page_size=100" || true)
            VERSION=$(echo "$TAGS_JSON" | jq -r '.results[].name' | grep -E '^[0-9].*-fpm$' | sed 's/-fpm$//' | sort -V | tail -n1)
            if [ -n "$VERSION" ]; then
              echo "✔ 成功获取版本：$VERSION（来源：Docker Hub）"
            else
              echo "❗ Docker Hub API 未取得版本，尝试容器内查询..."
              docker pull nextcloud:fpm
              VERSION=$(docker run --rm nextcloud:fpm php -r 'require "/var/www/html/version.php"; echo implode(".", $OC_Version);')
              if [ -n "$VERSION" ]; then
                echo "✔ 成功获取版本：$VERSION（来源：镜像）"
              fi
            fi
          fi
          if [ -z "$VERSION" ]; then
            echo "❌ 无法获取 Nextcloud 版本号，终止构建"
            exit 1
          fi
          echo "latest_version=$VERSION" >> "$GITHUB_OUTPUT"
        shell: bash

      # ② 读取上次构建时记录的版本号
      - name: 读取历史版本
        id: current
        run: |
          if [[ -f .last_version ]]; then
            echo "current_version=$(cat .last_version)" >> "$GITHUB_OUTPUT"
          else
            echo "current_version=none" >> "$GITHUB_OUTPUT"
          fi

      # ③ 比较版本号，决定是否需构建
      - name: 判断是否需构建
        id: decide
        run: |
          if [ "${{ steps.upstream.outputs.latest_version }}" != "${{ steps.current.outputs.current_version }}" ]; then
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          fi
          echo "latest_version=${{ steps.upstream.outputs.latest_version }}" >> "$GITHUB_OUTPUT"

  build:
    needs: check
    if: needs.check.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write    # 允许提交 .last_version 变更
      packages: write    # 允许推送镜像到 GHCR（GitHub Packages）
    steps:
      - uses: actions/checkout@v4

      # 可选：设置 QEMU，以支持在非本机架构下构建镜像
      - uses: docker/setup-qemu-action@v3

      # 初始化 Docker Buildx（用于多架构构建）
      - uses: docker/setup-buildx-action@v3

      # GHCR 登录（使用默认的 GITHUB_TOKEN）
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 如需推送到 Docker Hub，请改用以下登录步骤，并确保提供用户名、令牌凭据
      # - uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USER }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ④ 构建并推送镜像
      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .examples/dockerfiles/full/fpm        # Dockerfile 所在目录
          file: .examples/dockerfiles/full/fpm/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.check.outputs.latest_version }}
            ${{ env.IMAGE_NAME }}:latest
          build-args: |
            NEXTCLOUD_VERSION=${{ needs.check.outputs.latest_version }}

      # ⑤ 更新版本记录文件，供下次运行时比较
      - name: 更新版本缓存
        run: echo "${{ needs.check.outputs.latest_version }}" > .last_version

      # ⑥ 自动提交 .last_version 文件变更
      - name: Git 自动提交版本变更
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: build Nextcloud ${{ needs.check.outputs.latest_version }}"

      # ⑦ 控制台输出构建结果
      - name: 输出结果
        run: echo "✅ 已构建 Nextcloud Full-FPM v${{ needs.check.outputs.latest_version }}"
